class Solution {
    public int shortestSubarray(int[] nums, int k) {
        int n = nums.length;
        int s= Integer.MAX_VALUE;
        long sum= 0;
        PriorityQueue<Pair<Long, Integer>> p= new PriorityQueue<>(
            (a, b) -> Long.compare(a.getKey(), b.getKey())
        );
        for (int i = 0; i < n; i++) {
            sum+= nums[i];
            if (sum>= k) 
                s= Math.min(s,i + 1);
            while (!p.isEmpty() && sum- p.peek().getKey() >= k )
                s= Math.min(s,i - p.poll().getValue());
            p.offer(new Pair<>(sum, i));
        }
        return s== Integer.MAX_VALUE? -1: s;
    }
}
